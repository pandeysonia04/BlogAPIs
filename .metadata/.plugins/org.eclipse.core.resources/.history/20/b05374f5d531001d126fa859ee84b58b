package com.example.demo.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Comment;
import com.example.demo.entity.Post;
import com.example.demo.exception.BlogAPIException;
import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.payload.CommentDto;
import com.example.demo.repo.CommentRepository;
import com.example.demo.repo.PostRepository;
import com.example.demo.service.CommentService;

@Service
public class CommentServiceImpl implements CommentService {

	private CommentRepository commentRepository;
	private PostRepository postRepository;

	public CommentServiceImpl(CommentRepository commentRepository, PostRepository postRepository) {
		this.commentRepository = commentRepository;
		this.postRepository = postRepository;
	}

	// convert Enity to CommentDto
	private CommentDto maptoDto(Comment comment) {
		CommentDto commentDto = new CommentDto();
		commentDto.setId(comment.getId());
		commentDto.setName(comment.getName());
		commentDto.setEmail(comment.getEmail());
		commentDto.setBody(comment.getMessageBody());

		return commentDto;
	}

	// convert CommentDto to Entity
	private Comment maptoEntity(CommentDto commentDto) {

		Comment comment = new Comment();
		comment.setId(commentDto.getId());
		comment.setName(commentDto.getName());
		comment.setEmail(commentDto.getEmail());
		comment.setMessageBody(commentDto.getBody());
		return comment;

	}

	@Override
	public CommentDto createComment(long postid, CommentDto commentDto) {

		Comment comment = maptoEntity(commentDto);

		// retrieve post entity by id
		Post post = postRepository.findById(postid)
				.orElseThrow(() -> new ResourceNotFoundException("Post", "id", postid));

		// set post to comment entity
		comment.setPost(post);

		// save coment entity to DB

		Comment newComment = commentRepository.save(comment);

		return maptoDto(newComment);
	}

	@Override
	public List<CommentDto> getCommentByPostId(long postId) {

		// retrieve comment by postid
		List<Comment> comments = commentRepository.findByPostId(postId);
		return comments.stream().map(comment -> maptoDto(comment)).collect(Collectors.toList());

	}

//get Comemnt by Id
	@Override
	public CommentDto getCommentById(long postId, long commentId) {

		// retrieve post entity by id
		Post post = postRepository.findById(postId)
				.orElseThrow(() -> new ResourceNotFoundException("Post", "id", postId));

		// retrieve comment by id
		Comment comment = commentRepository.findById(commentId)
				.orElseThrow(() -> new ResourceNotFoundException("Comment", "id", commentId));

		if (!comment.getPost().getId().equals(post.getId())) {
			throw new BlogAPIException(HttpStatus.BAD_REQUEST, "Comment does not belongs to any post");
		}
		return maptoDto(comment);

	}

	@Override
	public CommentDto updateCommentById(long postId, long commentId, CommentDto updatedcommentDto) {

		// retrieve post entity by id
		Post post = postRepository.findById(postId)
				.orElseThrow(() -> new ResourceNotFoundException("Post", "id", postId));

		// retrieve comment by id
		Comment comment = commentRepository.findById(commentId)
				.orElseThrow(() -> new ResourceNotFoundException("Comment", "id", commentId));

		if (!comment.getPost().getId().equals(post.getId())) {
			throw new BlogAPIException(HttpStatus.BAD_REQUEST, "Comment does not belongs to any post");
		}

		comment.setName(updatedcommentDto.getName());
		comment.setEmail(updatedcommentDto.getEmail());
		comment.setMessageBody(updatedcommentDto.getBody());

		Comment updatedComment = commentRepository.save(comment);
		return maptoDto(updatedComment);

	}

	@Override
	public void deleteCommentById(long postId, long commentId) {
		
		findPostAndCommentById(postId, commentId);
		commentRepository.delete(comment);
		
	}

	private void findPostAndCommentById(long postId, long commentId) {
		// retrieve post entity by id
				Post post = postRepository.findById(postId)
						.orElseThrow(() -> new ResourceNotFoundException("Post", "id", postId));

				// retrieve comment by id
				Comment comment = commentRepository.findById(commentId)
						.orElseThrow(() -> new ResourceNotFoundException("Comment", "id", commentId));

				if (!comment.getPost().getId().equals(post.getId())) {
					throw new BlogAPIException(HttpStatus.BAD_REQUEST, "Comment does not belongs to any post");
				}
	}
}

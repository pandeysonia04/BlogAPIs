package com.example.demo.configuration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.example.demo.security.CustomUserDetailsService;
import com.example.demo.security.JwtAuthEntryPoint;
import com.example.demo.security.JwtAuthFilter;

import springfox.documentation.service.ApiKey;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	
	private CustomUserDetailsService userDetailsService;
	
	@Autowired
	private JwtAuthEntryPoint jwtAuthenticationEntryPoint;
	
	public SecurityConfiguration(CustomUserDetailsService userDetailsService) {
		this.userDetailsService = userDetailsService;
	}

	@Bean
	public JwtAuthFilter jwtAuthenticationfiler() {
			return new JwtAuthFilter();
	}
	
	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
	
		http
		.csrf().disable()
		.exceptionHandling()
		.authenticationEntryPoint(jwtAuthenticationEntryPoint) 
		.and()
		.sessionManagement()
		.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
		.and()
		.authorizeRequests()
		.antMatchers(HttpMethod.GET, "/api/v1**").permitAll()
		.antMatchers("/api/v1/auth/**").permitAll()
		.antMatchers("/v2/api-docs/**").permitAll()
		.antMatchers("/swagger-ui/**").permitAll()
		.antMatchers("/swagger/resources").permitAll()
		.antMatchers("/web/jars/**").permitAll()
		.anyRequest()
		.authenticated();
		
		http.addFilterBefore(jwtAuthenticationfiler(), UsernamePasswordAuthenticationFilter.class);
		
		
	}
	
	// DB authentication code 
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
	}
	
//	//In memory authentication code
//	@Override
//	@Bean
//	protected UserDetailsService userDetailsService() {
//		UserDetails soni=User.builder().username("Soni").password(passwordEncoder().encode("password")).roles("USER").build();
//		UserDetails admin=User.builder().username("Admin").password(passwordEncoder().encode("password")).roles("ADMIN").build();
//		return new InMemoryUserDetailsManager(soni,admin);

//}
	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception {
return super.authenticationManagerBean();
	}
	
}
